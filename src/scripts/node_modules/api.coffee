_ = require 'lodash'
t = require 'transducers.js'
moment = require 'moment'
docuri = require 'docuri'
Promise = require 'bluebird'
defaults = require 'json-schema-defaults'
YAML = require 'js-yaml'
qs = require 'qs'

Crypto = require '../../../crypto.coffee'
sendMail = require '../../../send-mail.coffee'
utils = require '../utils.coffee'
{ read } = require '../../../utils.coffee'
DB = require '../../../db.coffee'
Lang = require '../../../lang.coffee'
URL = require '../../../url.coffee'
{ getUserPath } = require '../url.coffee'

readAsync = Promise.promisify read

getDocumentId = docuri.route ':type/:created/:slug'

route = docuri.route 'article/:created'

articleDefaults = defaults YAML.safeLoad read 'schema/article-schema.yaml'

getKey = (slug, date) ->
  dateKey = null
  if date
    if typeof date.toISOString == 'function'
      dateKey = date.toISOString()
    else
      dateKey = date
  if slug
    [ 'article', slug, dateKey ].filter Boolean
  else if dateKey
    route created: dateKey
  else
    throw new Error('could not construct key')

setArticleParams = (article) ->
  created = moment(article.created || new Date())
  article.urlParams =
    year: created.year()
    month: created.month() + 1
    day: created.date()
    slug: article.slug
  return article

module.exports =
  changePassword: (userId, data) ->
    data.userId = userId
    DB.changePassword data
  fetchArticles: (params) ->
    query =
      endkey: [ 'article' ]
      startkey: [ 'article\uffff' ]
    view = 'by_updated'
    if params.slug
      view = 'by_slug_and_date'
      # endkey is earlier than startkey because we use descending order
      query =
        endkey: getKey params.slug
        startkey: getKey params.slug, {}
    if params.year
      dateKeys = [ 'year', 'month', 'day' ]
      dateParams = t.seq(
        utils.getProps params, dateKeys
        utils.mapValues _.parseInt
      )
      dateParams.month = dateParams.month - 1 if dateParams.month
      date = moment.utc dateParams
      durationKey = _.last t.filter(
        dateKeys
        Object.prototype.hasOwnProperty.bind dateParams
      )
      if durationKey
        query =
          endkey: getKey params.slug, date
          startkey: getKey params.slug, date.add(1, durationKey)
    query.slug = params.slug if params.slug
    query.descending = true
    DB.get(view, query).then (body) ->
      docs: body.map setArticleParams
  fetchLocaleStrings: (_lang) ->
    lang = Lang.negotiateLang _lang
    if !lang
      err = new Error('invalid lang: ' + _lang)
      return Promise.reject err
    readAsync 'locales/' + lang + '.yaml'
      .then (text) ->
        lang: lang
        data: YAML.safeLoad text
  getArticleDefaults: ->
    Object.assign {}, articleDefaults
  login: (data) ->
    fields = [ 'email', 'password' ]
    DB.authenticate utils.getProps data, fields
      .then (user) ->
        user:
          _id: user._id
        timestamp: Date.now()
  logout: ->
    Promise.resolve null
  requestPasswordReset: (data, serverUrl) ->
    email = data.email
    if !email
      throw new Error('no email provided')
    timestamp = Date.now()
    DB.get 'by_email', key: [ 'user', email ]
      .then (user) ->
        path = getUserPath(user._id) + '/change-password'
        arr = [ user.password_hash, path, timestamp ]
        Crypto.sign(arr).then (token) ->
          queryString = qs.stringify { timestamp, token }
          url = serverUrl + path + '?' + queryString
          sendMail
            to: email
            subject: 'Password reset'
            text: url
  saveArticle: (article, userId) ->
    if !article._id
      article._id = getDocumentId article
    DB.put userId, article
  signup: DB.addUser
