const R = require('ramda');
const t = require('transducers.js');

const Lang = require('../../lib/lang.js');
const URL = require('../web_modules/urlHelpers.js');
const utils = require('../scripts/utils.js');

function splitPath(path) {
  const parts = path.split('/');
  const i = parts.length - 1;
  const obj = { path: parts };
  const filenameParts = parts[i].split('.');
  parts[i] = filenameParts[0];
  obj.filename = filenameParts;
  return obj;
}

function validate(input, validation) {
  return validation.test(input) ? input : null;
}

function validationReducer(parts, item, i, keysAndValidations) {
  item[1] = validate(parts[0], item[1]);
  if (item[1]) {
    parts.shift();
  }
  return keysAndValidations.length > i + 1 ? parts : keysAndValidations;
}

function getParams(arg) {
  let path;
  if (!arg) {
    return {};
  }
  if (typeof arg == 'string' || arg instanceof String) {
    path = arg;
  }
  else if (arg.splat) {
    path = arg.splat;
  }
  else {
    return Object.assign({}, arg);
  }
  const obj = splitPath(path);
  const lang = obj.filename.filter(Lang.negotiateLang)[0];
  let parts = obj.path;
  const i = parts.length - 1;
  if (parts[i] === lang) {
    parts[i] = '';
  }
  const keys = ['year', 'month', 'day', 'slug', 'view'];
  const twoDigits = /^\d{2}$/;
  const str = /^.+$/;
  const validation = [
    /^\d{4}$/,
    twoDigits,
    twoDigits,
    str,
    str,
  ];
  parts = parts.filter(Boolean);
  const params = R.fromPairs(
    R.zip(keys, validation)
      .reduce(validationReducer, parts)
      .filter(R.pipe(R.last, R.identity))
  );
  if (arg.userId) {
    params.userId = arg.userId;
  }
  if (lang) {
    params.lang = lang;
  }
  return params;
}

function getServerUrl(req) {
  return `${req.protocol}://${req.get('Host')}`;
}

module.exports = Object.assign({}, URL, { getParams, getServerUrl, splitPath });
