const Promise = require('bluebird');
const docuri = require('docuri');
const defaults = require('json-schema-defaults');
const moment = require('moment');
const qs = require('qs');
const R = require('ramda');
const YAML = require('js-yaml');

const Crypto = require('../../lib/crypto.js');
const DB = require('../../lib/db.js');
const Lang = require('../../lib/lang.js');
const logger = require('../../lib/log.js');
const sendMail = require('../../lib/sendMail.js');
const URL = require('./urlHelpers.js');
const utils = require('../scripts/utils.js');
const { read } = require('../../lib/utils.js');

const { getUserPath } = URL;

const readAsync = Promise.promisify(read);

const getDocumentId = docuri.route(':type/:created/:slug');
const route = docuri.route('article/:created');

const articleDefaults = defaults(
  YAML.safeLoad(read('schema/article-schema.yaml'))
);

function getKey(slug, date) {
  let dateKey = null;
  if (date) {
    dateKey = typeof date.toISOString == 'function' ? date.toISOString() : date;
  }
  if (slug) {
    return ['article', slug, dateKey].filter(Boolean);
  }
  else if (dateKey) {
    return route({ created: dateKey });
  }
  throw new Error('could not construct key');
}

function setArticleParams(article) {
  const created = moment(article.created.utc || new Date());
  const urlParams = {
    year: created.year(),
    month: created.month() + 1,
    day: created.date(),
    slug: article.slug,
  };
  return R.assoc('urlParams', urlParams, article);
}

// Public API

function changePassword(userId, data) {
  return DB.changePassword(R.assoc('userId', userId, data));
}

function fetchArticles(params) {
  let query = {
    endkey: ['article'],
    startkey: ['article\uffff'],
  };
  let view = 'by_updated';
  if (params.slug) {
    view = 'by_slug_and_date';
    // endkey is earlier thant startkey because we use descending order
    query = {
      endkey: getKey(params.slug),
      startkey: getKey(params.slug, {}),
    };
  }
  if (params.year) {
    const dateKeys = ['year', 'month', 'day'];
    const dateParams = R.map(Number, R.pick(dateKeys, params));
    if (dateParams.month) {
      dateParams.month = dateParams.month - 1;
    }
    const date = moment.utc(dateParams);
    const durationKey = R.last(R.difference(dateKeys, Object.keys(dateParams)));
    if (durationKey) {
      query = {
        endkey: getKey(params.slug, date),
        startkey: getKey(params.slug, date.add(1, durationKey)),
      };
    }
  }
  if (params.slug) {
    query.slug = params.slug;
  }
  query.descending = true;
  return DB.get(view, query)
    .then(body => ({ docs: body.map(setArticleParams) }))
    .catch(logger.error);
}

function fetchLocaleStrings(_lang) {
  const lang = Lang.negotiateLang(_lang);
  if (!lang) {
    return Promise.reject(new Error(`invalid lang: ${_lang}`));
  }
  return readAsync(`locales/${lang}.yaml`).then(text => (
    { lang, data: YAML.safeLoad(text) }
  ));
}

function getArticleDefaults() {
  return R.clone(articleDefaults);
}

function login(data) {
  return DB.authenticate(R.pick(['email', 'password'], data))
    .then(user => ({ user: utils.getUserProps(user), timestamp: Date.now() }));
}

function logout() {
  return Promise.resolve(null);
}

function requestPasswordReset(data, serverUrl) {
  const { email } = data;
  if (!email) {
    throw new Error('no email provided');
  }
  const timestamp = Date.now();
  return DB.get('by_email', { key: ['user', email] })
    .then(user => {
      const path = `${getUserPath(user._id)}/change-password`;
      return Crypto.sign([user.password_hash, path, timestamp]).then(token => {
        const queryString = qs.stringify({ timestamp, token });
        const url = `${serverUrl}${path}?${queryString}`;
        return sendMail({ to: email, subject: 'Password reset', text: url });
      });
    });
}

function saveArticle(_article, userId) {
  let article = _article;
  if (!article._id) {
    const id = getDocumentId({
      type: article.type,
      created: article.created.utc,
      slug: article.slug,
    });
    article = R.assoc('_id', id, article);
  }
  DB.put(userId, article);
}

const signup = DB.addUser;

module.exports = {
  changePassword,
  fetchArticles,
  fetchLocaleStrings,
  getArticleDefaults,
  login,
  logout,
  requestPasswordReset,
  saveArticle,
  signup,
};
